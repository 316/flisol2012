(dp1
S'output'
p2
S"<type 'exceptions.KeyError'> 'stateself'"
p3
sS'layer'
p4
S'/home/marco/flisol2012/web2py/applications/flisol2012/controllers/default.py'
p5
sS'code'
p6
S'#############################################\n### general variables\n#############################################\n\nfrom gluon.sqlhtml import form_factory\n\n#############################################\n# The main public page\n#############################################\n\ndef index():\n    return plugin_flatpage()\n\n#############################################\n# Manage Authentication\n#############################################\n\ndef login():\n    return dict(form=auth.login(next=\'index\',\n                                onaccept=lambda form:update_pay(auth.user)))\n\ndef verify():\n    return auth.verify_email(next=URL(r=request,f=\'login\'))\n\ndef register():\n    form=auth.register(next=\'index\',\n                       onaccept=update_person)\n    return dict(form=form)\n                \ndef password():\n    return dict(form=auth.retrieve_password(next=\'login\'))\n\n@auth.requires_login()\ndef logout(): auth.logout(next=\'index\')\n\n@auth.requires_login()\ndef profile():\n    you=db.auth_user.id==auth.user.id\n    person=db(you).select()[0]\n    require_address(person)\n    if person.amount_paid>0 or person.amount_subtracted>0:\n        db.auth_user.donation_to_PSF.writable=False\n        db.auth_user.attendee_type.writable=False\n        db.auth_user.discount_coupon.writable=False\n    form=crud.update(db.auth_user,auth.user.id,\n                     onaccept=update_person,\n                     next=\'pay\')\n    return dict(form=form)\n\n\n\n#############################################\n# Submit Financial Aid Application\n#############################################\n\n@auth.requires_login()\ndef fa_app():\n    # following idiom from Massimo\'s profile():\n    try:\n        you=db.fa.person==auth.user.id\n        db.fa[\'exposes\']=db.fa.fields[4:]\n        person=db(you).select()[0]\n    except:\n        if datetime.datetime.today() > FACUTOFF_DATE:\n            t2.redirect(\'index\',flash=XML(T(\'<b><font color="red">Applications are no longer being accepted.</b><br>(Financial Aid Application deadline: 23 February 2009)</font>\')))\n        form=t2.create(db.fa,vars=dict(person=auth.user.id),onaccept=lambda form: email_fa(\'created\'),next=\'fa_app\')\n    else:\n        form=t2.update(db.fa,query=you,deletable=False,onaccept=lambda form: email_fa(\'updated\'),next=\'fa_app\')\n    # email from here...\n    return dict(form=form)\n    \n\n#############################################\n# Submit payment\n#############################################\n\n@auth.requires_login()\ndef pay():\n    person=db(db.auth_user.id==auth.user.id).select()[0]\n    balance=session.balance\n    pay=H2(T(\'No payment due at this time\'))\n    return dict(person=person,transfers_in=[],\n                transfers_out=[],payments=[],\n                pay=pay,balance=balance)\n\n@auth.requires_login()\ndef cancel_transfer():\n    try:\n         db((db.money_transfer.id==request.args[0])&(db.money_transfer.to_person==auth.user.id)&(db.money_transfer.approved==False)).delete()\n         t2.redirect(\'pay\',flash=T(\'Transfer cancelled\'))\n    except Exception:\n         t2.redirect(\'pay\',flash=T(\'Invalid operation\'))\n\n\n#############################################\n# Allow registered visitors to download\n#############################################\n\n@auth.requires_login()\ndef download(): return response.download(request,db)\n\n@auth.requires_login()\ndef proposed_talks():\n    talks=db(db.talk.id>0).select(orderby=db.talk.title)\n    return dict(talks=talks)\n\ndef accepted_talks():\n    db.talk[\'represent\']=lambda talk: A(\'%s by %s\' % (talk.title,talk.authors),\n       _href=URL(r=request,f=\'talk_info\',args=[talk.id]))\n    rows=db((db.talk.status==\'accepted\')&(db.auth_user.id==db.talk.created_by)).select(orderby=db.talk.title)\n    return dict(rows=rows)\n\n@auth.requires_login()\ndef propose_talk():\n    return dict(form=crud.create(db.talk, next=\'display_talk/[id]\'))\n\n@auth.requires_login()\ndef update_talk():\n    if not db(db.talk.created_by==auth.user.id and db.talk.id==request.args[0]).count():\n        redirect(URL(r=reuqest,f=\'index\'))\n    form=crud.update(db.talk, request.args[0],\n                     next=\'display_talk/[id]\',\n                     ondelete=lambda form: redirect(URL(r=request,f=\'index\')))\n    return dict(form=form)\n\n#@auth.requires_login()\ndef display_talk(): \n    item=t2.display(db.talk)\n    comments=t2.comments(db.talk)\n    rows=db(db.talk.id==auth.user.id).select()\n    if rows and rows[0].created_by==auth.user.id:\n        writable=True\n    else:\n        writable=False\n    attachments=t2.attachments(db.talk,writable=writable)\n    return dict(item=item,comments=comments,attachments=attachments)\n\ndef talk_info(): \n    item=t2.display(db.talk,query=(db.talk.id==auth.user.id)&(db.talk.status==\'accepted\'))\n    return dict(item=item)\n\n@auth.requires_login()\ndef review_talk(): \n    item=t2.display(db.talk)\n    rows=db(db.talk.id==auth.user.id).select()\n    if session.reviewer and rows and not rows[0].created_by==auth.user.id:\n        writable=True\n    else:\n        writable=True\n    attachments=t2.attachments(db.talk,writable=True)\n    reviews=t2.reviews(db.talk,writable=writable)\n    return dict(item=item,reviews=reviews,attachments=attachments)\n\n\n\n#############################################\n### FOR ALL ATTENDEES\n#############################################\n\n@cache(request.env.path_info,time_expire=60,cache_model=cache.ram)\ndef companies():\n    if session.manager: s=db()\n    else: s=db(db.auth_user.include_in_delegate_listing==True)\n    rows=s.select(db.auth_user.company_name,\n                  db.auth_user.company_home_page,\n                  orderby=db.auth_user.company_name,distinct=True)\n    return dict(rows=rows)\n    \n@cache(request.env.path_info,time_expire=60,cache_model=cache.ram)\ndef attendees():\n    if session.manager: s=db(db.auth_user.attendee_type!=\'non_attending\')\n    else: s=db((db.auth_user.include_in_delegate_listing==True)&(db.auth_user.attendee_type!=\'non_attending\')&(db.auth_user.amount_due==0.0))\n    rows=s.select(db.auth_user.ALL,\n                  orderby=db.auth_user.first_name|db.auth_user.last_name)\n    return dict(rows=rows)\n\n##@cache(request.env.path_info,time_expire=60,cache_model=cache.ram)\ndef charts():    \n    cn=[]\n    colors=[\'#ff0000\',\'#ff0033\',\'#ff0066\',\'#ff0099\',\'#ff00cc\',\'#ff00ff\',\n            \'#996600\',\'#996633\',\'#996666\',\'#996699\',\'#9966cc\',\'#9966ff\',\n            \'#669900\',\'#669933\',\'#669966\',\'#669999\',\'#6699cc\',\'#cc99ff\',\n            \'#33cc00\',\'#33cc33\',\'#33cc66\',\'#33cc99\',\'#33cccc\',\'#33ccff\',\n            \'#00ff00\',\'#00ff33\',\'#00ff66\',\'#00ff99\',\'#00ffcc\',\'#00ffff\',\n            \'#996600\',\'#996633\',\'#996666\',\'#996699\',\'#9966cc\',\'#9966ff\',\n            \'#669900\',\'#669933\',\'#669966\',\'#669999\',\'#6699cc\',\'#cc99ff\',\n            \'#33cc00\',\'#33cc33\',\'#33cc66\',\'#33cc99\',\'#33cccc\',\'#33ccff\',\n            \'#00ff00\',\'#00ff33\',\'#00ff66\',\'#00ff99\',\'#00ffcc\',\'#00ffff\']\n    if not is_gae:\n        for k,item in enumerate(sorted(TUTORIALS.keys())):\n            m=db(db.auth_user.tutorials.like(\'%%|%s|%%\'%item)).count()\n            cn.append((TUTORIALS[item],colors[k],m))\n    else:        \n        cn2={}\n        for row in db(db.auth_user.id>0).select(db.auth_user.tutorials):\n            for item in sorted(TUTORIALS.keys()):\n                    if not cn2.has_key(item): cn2[item]=0\n                    if row.tutorials.find(\'|%s|\'%item)>=0: cn2[item]+=1\n        for k,item in enumerate(sorted(TUTORIALS.keys())):\n                cn.append((TUTORIALS[item],colors[k],cn2[item]))\n                k+=1\n    chart_tutorials=None #t2.barchart(cn,label_width=150)\n    def colorize(d):\n        s=[(m,n) for n,m in d.items()]\n        s.sort()\n        s.reverse()\n        t=[(x[1],colors[i % len(colors)],x[0]) for i,x in enumerate(s)]\n        return t2.barchart(t,label_width=150)   \n    country={}\n    city={}\n    food_preference={}\n    t_shirt_size={}\n    attendee_type={}\n    installfest_os={}\n    for row in db().select(db.auth_user.ALL):\n        country[row.country]=country.get(row.country,0)+1\n        city[row.city.lower()]=city.get(row.city.lower(),0)+1\n        installfest_os[row.installfest_os]=installfest_os.get(row.installfest_os,0)+1\n        #food_preference[row.food_preference]=food_preference.get(row.food_preference,0)+1\n        #t_shirt_size[row.t_shirt_size]=t_shirt_size.get(row.t_shirt_size,0)+1\n        attendee_type[row.attendee_type]=attendee_type.get(row.attendee_type,0)+1\n    chart_country=colorize(country)\n    chart_city=colorize(city)\n    chart_installfest_os=colorize(installfest_os)\n    chart_food_preference=None #colorize(food_preference)\n    chart_t_shirt_size=None #colorize(t_shirt_size)\n    chart_attendee_type=None #colorize(attendee_type)\n    return dict(chart_tutorials=chart_tutorials,\n                chart_country=chart_country,\n                chart_food_preference=chart_food_preference,\n                chart_t_shirt_size=chart_t_shirt_size,\n                chart_city=chart_city,\n                chart_installfest_os=chart_installfest_os,\n                chart_attendee_type=chart_attendee_type)\n\n@cache(request.env.path_info,time_expire=60,cache_model=cache.ram)\ndef maps():\n    rows=db(db.auth_user.id>0).select(\n            db.auth_user.first_name,\n            db.auth_user.last_name,\n            db.auth_user.latitude,\n            db.auth_user.longitude,\n            db.auth_user.personal_home_page)\n    x0,y0=CONFERENCE_COORDS\n    return dict(googlemap_key=GOOGLEMAP_KEY,x0=x0,y0=y0,rows=rows)\n\n#############################################\n### FOR MANAGERS\n#############################################\n\n@auth.requires_login()\ndef badges():\n    if not session.manager: t2.redirect(\'index\')\n    rows=db().select(db.auth_user.first_name,\n                db.auth_user.first_name,\n                db.auth_user.last_name,\n                db.auth_user.company_name,\n                db.auth_user.state,\n                db.auth_user.country, \n                db.auth_user.food_preference,\n                db.auth_user.speaker,\n                db.auth_user.session_chair,\n                db.auth_user.manager,\n                db.auth_user.reviewer)\n    return str(rows)\n    \n@auth.requires_login()\ndef maillist():\n    \'\'\'\n    Create a comma-separated mail list of attendees;\n    could expand to create many different lists.\n    \'\'\'\n    if not session.manager: t2.redirect(\'index\')\n    rec=db((db.auth_user.amount_due<=0)&(db.auth_user.attendee_type!=\'non_attending\')).select(db.auth_user.email,orderby=db.auth_user.email)\n    response.headers[\'Content-Type\']=\'text/csv\'\n    ## BUG: (yarko:) str calls csv-writer,\n    ##   which on both Ubuntu & Win returns \\r\\n for newline; need to find & fix\n    buggy_newline=\'\\r\\n\'\n    # rec renders column header I don\'t want:\n    return str(rec).partition(\'\\n\')[-1].replace(buggy_newline,\',\\n\')\n\n@auth.requires_login()\ndef financials():\n    if not session.manager: t2.redirect(\'index\')\n    rows=db().select(db.auth_user.ALL,orderby=db.auth_user.first_name|db.auth_user.last_name)\n    billed=sum([x.amount_billed for x in rows])\n    paid=sum([x.amount_paid for x in rows])\n    due=billed-paid\n    return dict(rows=rows,billed=billed,paid=paid,due=due)\n\n@auth.requires_login()\ndef financials_csv():\n    if not session.manager: t2.redirect(\'index\')\n    t=db.auth_user\n    rows=db().select(t.id,t.first_name,t.last_name,t.donation_to_PSF,t.amount_billed,t.amount_added,t.amount_subtracted,t.amount_paid,orderby=t.last_name)\n    response.headers[\'Content-Type\']=\'text/csv\'\n    return str(rows)\n\n@auth.requires_login()\ndef payments():\n    if not session.manager: t2.redirect(\'index\')\n    rows=db(db.payment.status!=\'PRE-PROCESSING\')(db.payment.from_person==db.auth_user.id).select(orderby=~db.payment.created_on)\n    return dict(payments=rows)\n\n@auth.requires_login()\ndef create():\n    if not (session.manager and request.args and request.args[0] in db.tables):\n         t2.redirect(\'index\')\n    table=request.args[0]\n    db[table][\'exposes\']=db[table].fields\n    form=t2.create(db[table])\n    db[table][\'represent\']=lambda item: A(item.id,\':\',\n        item[db[table].fields[1]],_href=t2.action(\'update\',[table,item.id]))\n    search=t2.search(db[table])\n    return dict(form=form,search=search)\n\n@auth.requires_login()\ndef update():\n    if not (session.manager and request.args and request.args[0] in db.tables):\n         t2.redirect(\'index\')\n    table=request.args[0]\n    if table==\'auth_user\':\n        ##db[table][\'exposes\']=db.auth_user.exposes[:-1]\n        form=t2.update(db[table],next=\'impersonate/[id]\')\n    else:\n        db[table][\'exposes\']=db[table].fields\n        form=t2.update(db[table],next=\'create/%s\' % table)\n    if table==\'auth_user\' and form.vars.id:\n        balance=session.balance\n        update_pay(form.record)\n        session.balance=balance\n    return dict(form=form)\n\n# Select records for badge\n@auth.requires_login()\ndef badge():\n    if not (session.manager and request.args and request.args[0] in db.tables):\n         t2.redirect(\'index\')\n    table=request.args[0]\n    db[table][\'exposes\']=db[table].fields\n    # this is for t2.search; it will start with person.name contains, which is good\n    #   (will disable searching by id - oh well ;-)\n    db[table][\'displays\']=db[table].fields[1:]\n    db[table][\'represent\']=lambda item: A(item.id,\' :   \',\n        item[db[table].fields[1]],\n    _href=URL(r=request, c=\'badge\', f=\'badge_pdf\', args=[table, item.id]))\n    search=t2.search(db[table])\n    return dict(search=search)\n\n\n@auth.requires_login()\ndef fa_csv():\n    if not session.manager: t2.redirect(\'index\')\n    person=db.auth_user\n    fa=db.fa\n    who=(person.id==fa.person)\n    rows=db(db.fa.id>0).select(person.first_name,person.last_name,person.id,person.address,person.city,\n                     person.stateself.person.zip_code,person.country, person.email, person.attendee_type,\n                     fa.registration_amount, fa.hotel_nights, fa.total_lodging_amount, fa.roommates,\n                     fa.transportation_details, fa.transportation_amount,\n                     fa.total_amount_requested, fa.minimum_amount_requested,fa.rationale,\n                     left=db.fa.on(who))  # the all important "join"\n    response.headers[\'Content-Type\']=\'text/csv\'\n    return str(rows)\n\n@auth.requires_login()\ndef fa_email_all():\n    if not session.manager: t2.redirect(\'index\')\n    email_fa_select()\n    session.flash="FA Records emailed to %s." % FA_EMAIL_TO\n    t2.redirect(\'index\')\n    \n\ndef about():\n    return dict()\n\n@auth.requires_login()\ndef pay_check(): return dict()\n\n@auth.requires_login()\ndef pay_other():\n    transfers_in=db(db.money_transfer.to_person==auth.user.id).select()\n    form=FORM(\'Tokens: \',INPUT(_name=\'codes\',requires=IS_NOT_EMPTY()),INPUT(_type=\'submit\'))\n    errors=[]\n    due=0.0\n    if form.accepts(request.vars,session):\n        for code in request.vars.codes.split(\',\'):\n            try:\n                id,pay_token=code.strip().split(\'-\')\n                if id==auth.user.id: raise Exception\n                if int(id) in [r.from_person for r in transfers_in]: raise Exception\n                row=db(db.auth_user.id==id).select()[0]\n                if not row.pay_token.upper()==pay_token.upper(): raise Exception                \n                amount=max(0.0,row.amount_billed-row.amount_paid)\n                db.money_transfer.insert(from_person=row.id,\n                        to_person=auth.user.id,amount=amount,approved=False,\n                        description="%s %s (%s)\'s Fees transferred to %s %s (%s)" % (row.first_name, row.last-name, row.id, auth.user.first_name, auth.user.last_name, auth.user.id))\n                transfers_in=db(db.money_transfer.to_person==auth.user.id).select()\n            except:\n                errors.append(code.strip())\n        if not errors: t2.redirect(\'pay\',flash=T(\'Balance transferred\'))\n        else: response.flash=\'Invalid Tokens: \'+\', \'.join(errors)\n    return dict(form=form,transfers_in=transfers_in)\n\n@auth.requires_login()\ndef register_other():\n    transfers_in=db(db.money_transfer.to_person==auth.user.id).select()\n    form=SQLFORM(db.auth_user,fields=[\'first_name\',\'last_name\',\'email\',\'attendee_type\',\'tutorials\',\'discount_coupon\'])\n    errors=[]\n    due=0.0\n    if form.accepts(request.vars,session):\n        amount=update_person(form)\n        db.money_transfer.insert(from_person=form.vars.id,\n                   to_person=auth.user.id,amount=amount,approved=False,\n                   description="%s %s (%s) \'s Fees transferred to %s %s (%s)" % (form.vars.first_name, form.vars.last_name, form.vars.id, auth.user.first_name,auth.user.last_name,auth.user.id))\n        transfers_in=db(db.money_transfer.to_person==auth.user.id).select()\n        t2.redirect(\'pay\',flash=T(\'Attendee registered and balance transferred\'))\n    return dict(form=form,transfers_in=transfers_in)\n\n@auth.requires_login()\ndef pay_other_info():\n    return dict(person=db(db.auth_user.id==auth.user.id).select()[0])\n\n@auth.requires_login()\ndef invoice(): return dict(balance=session.balance)\n\n@auth.requires_login()\ndef badges():\n    p=db.auth_user\n    rows=db().select(p.first_name,p.last_name,p.company_name,orderby=p.last_name|p.first_name)\n    response.headers[\'Content-Type\']=\'text/csv\'\n    return str(rows)\n\ndef notify():\n    response.headers[\'Content-Type\']=\'text/xml\'\n    return l2controller.receive_xml(request.body.read())\n\n@auth.requires_login()\ndef list_by_tutorial():\n    if not session.manager: t2.redirect(\'index\')\n    page=[]\n    for key,name in TUTORIALS_LIST:\n        rows=db(db.auth_user.tutorials.like(\'%%|%s|%%\'%key)).select(db.auth_user.id,db.auth_user.first_name,db.auth_user.last_name,db.auth_user.food_preference,orderby=db.auth_user.first_name|db.auth_user.last_name)\n        page.append(H1(name))\n        page.append(rows)\n    return HTML(BODY(page))\n\ndef list_by_tutorial_with_food():\n    page=[]\n    for key,name in TUTORIALS_LIST:\n        rows=db(db.auth_user.tutorials.like(\'%%|%s|%%\'%key)).select(db.auth_user.id,db.auth_user.first_name,db.auth_user.last_name,db.auth_user.food_preference,orderby=db.auth_user.first_name|db.auth_user.last_name)\n        page.append(H1(name))\n        page.append(rows)\n    return HTML(BODY(page))\n\n@auth.requires_login()\ndef by_tutorial_csv():\n    if not session.manager: t2.redirect(\'index\')\n    page=[]\n    for key,name in TUTORIALS_LIST:\n        rows=db(db.auth_user.tutorials.like(\'%%|%s|%%\'%key)).select(db.auth_user.id,db.auth_user.first_name,db.auth_user.last_name,db.auth_user.food_preference,orderby=db.auth_user.first_name|db.auth_user.last_name)\n        page.append(name)\n        page.append(str(rows))\n        page.append(\'\\n\')\n    response.headers[\'Content-Type\']=\'text/plain\'\n    return str(page)\n\n@auth.requires_login()\ndef impersonate():\n    if not session.manager or not request.args: t2.redirect(\'index\')\n    person=db(db.auth_user.id==request.args[0]).select()[0]\n    balance2=session.balance #trick\n    transfers_in,transfers_out,payments=update_pay(person)\n    balance=session.balance\n    session.balance=balance2 #trick\n    charged_payments=[row for row in payments if row.status.lower()==\'charged\']\n    pending_payments=[row for row in payments if row.status.lower()==\'submitted\']\n    ### this is HORRIBLE but las minute change asked by Kurt\n    ### donations is (name,email,amount)\n    ### amounts is (name,email,conference_fees)\n    ### contained in this one payment\n    if not charged_payments:\n          donations=[(person.first_name+\' \'+person.last_name,person.id,person.donation_to_PSF)]\n          amounts=[(row.auth_user.first_name+\' \'+row.auth_user.last_name,row.auth_user.id,row.money_transfer.amount) for row in transfers_in]\n          amounts.append((person.first_name+\' \'+person.last_name,person.id,person.amount_billed-donations[0][2]))\n    else:\n          last_payment_datetime=person.created_on\n          for payment in charged_payments:\n              if payment.created_on>last_payment_datetime:\n                  last_payment_datetime=payment.created_on\n          donations=[]\n          amounts=[(row.auth_user.first_name+\' \'+row.auth_user.last_name,row.auth_user.id,row.money_transfer.amount) for row in transfers_in if row.money_transfer.created_on>last_payment_datetime]\n          samounts=sum([row[2] for row in amounts])\n          amounts.append((person.first_name+\' \'+person.last_name,person.id,session.balance-samounts))\n    transfers_in=[row.money_transfer for row in transfers_in]\n    if balance<=0.0: pay=H2(T(\'No payment due at this time\'))\n    elif not pending_payments: pay=H2(T(\'Payment expected\'))\n    else: pay=H2(T(\'Your payment is being processed... (read below)\'))\n    return dict(person=person,transfers_in=transfers_in,\n                transfers_out=transfers_out,payments=payments,\n                pay=pay,balance=balance)\n\n\n@auth.requires_login()\ndef cancel_transfer2():\n    if not session.manager or len(request.args)<2: t2.redirect(\'index\')\n    try:\n         db(db.money_transfer.id==request.args[1]).delete()\n         t2.redirect(\'impersonate/%s\'%request.args[0],flash=T(\'Transfer cancelled\'))\n    except Exception:\n         t2.redirect(\'impersonate/%s\'%request.args[0],flash=T(\'Invalid operation\'))\n\n@auth.requires_login()\ndef cancel_payment2():\n    if not session.manager or len(request.args)<2: t2.redirect(\'index\')\n    try:\n         db(db.payment.id==request.args[1]).update(status=\'CANCELLED\')\n         t2.redirect(\'impersonate/%s\'%request.args[0],flash=T(\'Payment cancelled\'))\n    except Exception:\n         t2.redirect(\'impersonate/%s\'%request.args[0],flash=T(\'Invalid operation\'))\n\nresponse._vars=response._caller(fa_csv)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/marco/flisol2012/web2py/gluon/restricted.py", line 205, in restricted\n    exec ccode in environment\n  File "/home/marco/flisol2012/web2py/applications/flisol2012/controllers/default.py", line 522, in <module>\n  File "/home/marco/flisol2012/web2py/gluon/globals.py", line 173, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/marco/flisol2012/web2py/gluon/tools.py", line 2575, in f\n    return action(*a, **b)\n  File "/home/marco/flisol2012/web2py/applications/flisol2012/controllers/default.py", line 358, in fa_csv\n    person.stateself.person.zip_code,person.country, person.email, person.attendee_type,\n  File "/home/marco/flisol2012/web2py/gluon/dal.py", line 6774, in __getattr__\n    return self[key]\n  File "/home/marco/flisol2012/web2py/gluon/dal.py", line 6714, in __getitem__\n    return dict.__getitem__(self, str(key))\nKeyError: \'stateself\'\n'
p11
s.